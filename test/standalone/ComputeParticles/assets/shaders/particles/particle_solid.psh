#include "shaders/particles/structures.fxh"

cbuffer SConstants {
    SceneConstants SConstants;
};

cbuffer PConstants {
    ParticleConstants PConstants;
};

struct PSOutput {
    float4 Color : SV_TARGET;
};

void main( in BoidPSInput PSIn, out PSOutput PSOut )
{
    float3 col = lerp( float3( 0.2, 0.8, 0.98 ), float3( 0.9, 0.4, 0.18 ), saturate( PSIn.Movement * 0.15 ) );

    //col = float3( 1, 1, 1 );

    float NdotL = saturate( dot( PSIn.Normal, - SConstants.LightDirection.xyz ) );

    float lighting = NdotL * 0.8 + 0.1;
    col *= lighting;
    
    float emmissive = pow( PSIn.UV.y, 2 );
    emmissive = smoothstep( 0.7, 0.72, PSIn.UV.y );
    //emmissive *= sin(PConstants.time * 4.0 + float(PSIn.InstID) * 3.12) * 0.5 + 0.5;
    emmissive *= PSIn.Temp * 0.07;

    col = lerp( col, float3( emmissive, emmissive * 0.3f, emmissive * 0.01f ), emmissive );

#if 0    
    if( PSIn.InstID == 0 ) {
        col.r = 1.0;
    }
    if( PSIn.InstID == 1 ) {
        col.g = 1.0;
    }
    if( PSIn.InstID == 2 ) {
        col.b = 1.0;
    }
    if( PSIn.InstID == 3 ) {
        col = float3( 1, 0, 1 );
    }
#endif

    // visualize bins (xyz = 3D index, w = flattened index)
    if( PSIn.Bin.w == 380 ) {
        col = float3( 1, 1, 0 );        
    }

    //PSOut.Color = float4( PSIn.UV.x, PSIn.UV.y, 0.0, 1.0 );
    PSOut.Color = float4( col, emmissive * 4.0 );
    // PSOut.Color.r = 0;
    // PSOut.Color = float4( 1, 0, 0, 1 );
}
