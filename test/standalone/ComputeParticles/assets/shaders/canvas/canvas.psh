cbuffer Constants {
    float3 cCamPos;
    float3 cCamDir;
    float2 cPadding;
};

struct PSInput {
    float4 Pos   : SV_POSITION;
    float2 UV    : TEX_COORD;
};

struct PSOutput {
    float4 Color : SV_TARGET;
};

struct Ray {
    float3 origin;
    float3 dir;
};

// world -> view space
float3x3 calcLookAtMat3( in float3 ro, in float3 target, in float roll )
{
    float3 ww = normalize( target - ro );
    float3 uu = normalize( cross( ww, float3( sin( roll ), cos( roll ), 0.0 ) ) );
    float3 vv = normalize( cross( uu, ww ) );

    return float3x3( uu, vv, ww );
}

//! Returns a Ray for pixel position p
Ray calcViewRay( in float2 p, in float3 camPos, in float3 camDir, in float camRoll, in float lensLength )
{
    float3 camTarget = camPos + camDir;
    float3x3 viewMatrix = calcLookAtMat3( camPos, camTarget, camRoll );

    return Ray( camPos, normalize( viewMatrix * float3( p.xy, lensLength ) ) );
}


void main( in  PSInput  PSIn, out PSOutput PSOut )
{
    float2 UV = PSIn.UV;

    float camLensLength = 2.0;
    float camRoll = 0.0;
    //vec2 p = ( -uResolution.xy + 2.0 * gl_FragCoord.xy ) / uResolution.y;
    float2 p = PSIn.Pos.xy;
    Ray ray = calcViewRay( p, cCamPos, cCamDir, camRoll, camLensLength );

    float3 col = vec3( 0.1, 0.12, 0.18 ) * 0.7;
    col += ray.dir.y * 0.15;

    // PSOut.Color = float4( 0, 1, 0.0, 1.0 );
    // PSOut.Color = float4( UV.x, UV.y, 0.0, 1.0 );
    PSOut.Color = float4( cCamDir.x, cCamDir.y, cCamDir.z, 1.0 );
}
