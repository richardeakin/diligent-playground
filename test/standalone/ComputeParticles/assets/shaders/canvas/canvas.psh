cbuffer Constants {
    float3 cCamPos;
    float  padding0;
    float3 cCamDir;
    float  padding1;
    float2 cResolution;
    float  padding2;
    float  padding3;
};

struct PSInput {
    float4 Pos   : SV_POSITION;
    float2 UV    : TEX_COORD;
};

struct PSOutput {
    float4 Color : SV_TARGET;
};

struct Ray {
    float3 origin;
    float3 dir;
};

// world -> view space
float3x3 calcLookAtMat3( in float3 ro, in float3 target, in float roll )
{
    float3 ww = normalize( target - ro );
    float3 uu = normalize( cross( ww, float3( sin( roll ), cos( roll ), 0.0 ) ) );
    float3 vv = normalize( cross( uu, ww ) );

    return MatrixFromRows( uu, vv, ww );
}

//! Returns a Ray for pixel position p
Ray calcViewRay( in float2 p, in float3 camPos, in float3 camDir, in float camRoll, in float lensLength )
{
    float3 camTarget = camPos + camDir;
    float3x3 viewMatrix = calcLookAtMat3( camPos, camTarget, camRoll );

    Ray ray;
    ray.origin = camPos;
    ray.dir = normalize( mul( viewMatrix, float3( p.xy, lensLength ) ) );
    ray.dir.y *= -1; // TODO: figure out why +y is facing down
    return ray;
}

void main( in  PSInput  PSIn, out PSOutput PSOut )
{
    float2 UV = PSIn.UV;

    float camLensLength = 2.0;
    float camRoll = 0.0;
    float2 posNDC = PSIn.Pos.xy;
    float2 p = ( -cResolution.xy + 2.0 * posNDC ) / cResolution.y;

    Ray ray = calcViewRay( p, cCamPos, cCamDir, camRoll, camLensLength );

    float3 col = float3( 0.1, 0.05, 0.1 ) * 0.1;

    float ss1 = smoothstep( 0.0, 4.0, max( ray.dir.y + 0.1, 0.0 ) * 5.0 );
    col = lerp( col, float3( 0.7, 0.17, 0.03 ), ss1 );
    //col += ray.dir.y * 0.15;

    float ss2 = smoothstep( 0.0, 5.0, pow( max( ray.dir.y, 0.0 ), 1.3 ) * 10.0 );
    col = lerp( col, float3( 0.02, 0.03, 0.5 ), ss2 );

     PSOut.Color = float4( col, 0 ); // TODO: .a is 0 for current scene (it is emmissive now). Set back to 1 when this is made the stock canvas shader
     //PSOut.Color = float4( posNDC.x, posNDC.y, 0.0, 1.0 );
     //PSOut.Color = float4( UV.x, UV.y, 0.0, 1.0 );
    //PSOut.Color = float4( cCamDir.x, cCamDir.y, cCamDir.z, 1.0 );
}
