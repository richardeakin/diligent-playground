cbuffer Constants
{
    float g_Time;
    float g_Padding0;
    float g_Padding1;
    float g_Padding2;

    float4 g_UVPreTransform;    // Need to store this as float4, because 
    float4 g_UVPreTransformInv; // there are layout problems with float2x2.
};

Texture2D    g_Texture;
SamplerState g_Texture_sampler; // By convention, texture samplers must use the '_sampler' suffix

struct PSInput
{
    float4 Pos   : SV_POSITION;

    float2 UV    : TEX_COORD;
};

struct PSOutput
{
    float4 Color : SV_TARGET;
};

// Note that if separate shader objects are not supported (this is only the case for old GLES3.0 devices), vertex
// shader output variable name must match exactly the name of the pixel shader input variable.
// If the variable has structure type (like in this example), the structure declarations must also be identical.
void main(in  PSInput  PSIn,
          out PSOutput PSOut)
{
    float2 UV = PSIn.UV;

    float2 DistortedUV = UV + float2(sin(UV.y*300.0)*0.1 * sin(g_Time*3.0), sin(UV.x*200.0)*0.02 * sin(g_Time*2.0)) * 0.07;

    PSOut.Color = g_Texture.Sample(g_Texture_sampler, DistortedUV);
    //PSOut.Color.x = 1.0;
}
